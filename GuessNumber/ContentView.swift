//
//  ContentView.swift
//  GuessNumber
//
//  Created by sss on 17.04.2023.
//

import SwiftUI

struct ContentView: View {
    
    @State var isShowAlert = false
    @State var textInput = ""
    @State var name = ""
    @State var numberInput = ""
    @State var isOpen = false
    @State var isShowSecondAlert = false
    @State var result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢"
    
    @FocusState var isFocused: Bool
    
    var body: some View {
        
        ZStack {
            LinearGradient(colors: [Color.white, Color.blue], startPoint: .top, endPoint: .bottom).ignoresSafeArea()
            
            VStack(spacing: 25) {
                
                if isOpen {
                    
                    Text("""
                    \(name)!
                    –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –æ—Ç–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
                    """)
                        
                        .font(.title)
                        .multilineTextAlignment(.center)
                        .foregroundColor(.purple)
                    
                    
                    TextField("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100", text: $numberInput)
                        .textFieldStyle(.roundedBorder)
                        .tint(.blue)
                        .font(.system(size: 24))
                        .keyboardType(.decimalPad)
                        .padding(.horizontal, 12)
                        .foregroundColor(.blue)
                        .padding()
                        .focused($isFocused)
                    
                    Button {
                        isFocused = false
                        
                        isShowSecondAlert = true
                        
                        let number = Int.random(in: 1...100)
                        if numberInput == String(number) {
                            result = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–±–µ–¥–æ–π ü•≥"
                        }
                        
                    } label: {
                        
                        Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
                            .font(.headline)
                            .padding()
                            .padding(.horizontal)
                            .tint(.white)
                            .background(.purple)
                            .cornerRadius(34)
                    }.alert(Text(result), isPresented: $isShowSecondAlert) {
                        
                        Button {
                        } label: {
                            Text("Ok")
                        }
                    }
                    
                } else {
                    Text("""
                         –ü—Ä–∏–≤–µ—Ç!
                         –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!
                         """)
                    .font(.title)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.purple)
                    
                    Text("ü•≥")
                        .font(.largeTitle)
                        .multilineTextAlignment(.leading)
                    
                    Button {
                        isShowAlert = true
                        
                    } label: {
                        Text("–í–≤–µ—Å—Ç–∏ –∏–º—è")
                            .font(.headline)
                            .padding()
                            .padding(.horizontal)
                            .tint(.white)
                            .background(.purple)
                            .cornerRadius(34)
                        
                    }
                    .alert(Text("–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ"), isPresented: $isShowAlert) {
                        
                        TextField("–ò–º—è", text: $textInput)
                        Button {
                            name = textInput
                            isOpen = true
                        } label: {
                            Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                        }
                        Button(role: .cancel) {
                        } label: {
                            Text("–û—Ç–º–µ–Ω–∞")
                        }

                    } message: {
                        Text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
                    }
                }
                
            }
        }
       
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
